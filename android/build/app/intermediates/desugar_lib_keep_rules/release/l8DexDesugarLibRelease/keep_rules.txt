-keep class j$.io.BufferedReaderRetargetClass {
  public static j$.util.stream.Stream lines(java.io.BufferedReader);
}
-keep interface j$.io.BufferedReaderRetargetInterface {
  public j$.util.stream.Stream lines();
}
-keep class j$.io.DesugarBufferedReader {
  public static j$.util.stream.Stream lines(java.io.BufferedReader);
}
-keep class j$.lang.Iterable$-CC {
  public static void $default$forEach(java.lang.Iterable,java.util.function.Consumer);
}
-keep class j$.lang.Iterable$-EL {
  public static void forEach(java.lang.Iterable,java.util.function.Consumer);
  public static j$.util.Spliterator spliterator(java.lang.Iterable);
}
-keep class j$.time.Clock {
  public j$.time.Instant instant();
  public static j$.time.Clock systemUTC();
}
-keep enum j$.time.DayOfWeek {
}
-keep class j$.time.Duration {
  public static j$.time.Duration between(j$.time.temporal.Temporal,j$.time.temporal.Temporal);
  public int compareTo(j$.time.Duration);
  public int getNano();
  public long getSeconds();
  public boolean isNegative();
  public boolean isZero();
  public static j$.time.Duration ofMillis(long);
  public static j$.time.Duration ofMinutes(long);
  public static j$.time.Duration ofNanos(long);
  public static j$.time.Duration ofSeconds(long);
  public static j$.time.Duration ofSeconds(long,long);
  public j$.time.Duration plus(long,j$.time.temporal.TemporalUnit);
  public long toMillis();
  public long toNanos();
  j$.time.Duration ZERO;
}
-keep class j$.time.Instant {
  public long getEpochSecond();
  public int getNano();
  public int hashCode();
  public boolean isAfter(j$.time.Instant);
  public j$.time.Instant minus(j$.time.temporal.TemporalAmount);
  public j$.time.Instant minusMillis(long);
  public j$.time.Instant minusNanos(long);
  public j$.time.Instant minusSeconds(long);
  public static j$.time.Instant now();
  public static j$.time.Instant ofEpochMilli(long);
  public static j$.time.Instant ofEpochSecond(long,long);
  public j$.time.Instant plus(j$.time.temporal.TemporalAmount);
  public j$.time.Instant plusMillis(long);
  public j$.time.Instant plusNanos(long);
  public j$.time.Instant plusSeconds(long);
  public long toEpochMilli();
  public java.lang.String toString();
  public j$.time.Instant truncatedTo(j$.time.temporal.TemporalUnit);
  j$.time.Instant EPOCH;
  j$.time.Instant MAX;
  j$.time.Instant MIN;
}
-keep class j$.time.LocalDateTime {
  public static j$.time.LocalDateTime parse(java.lang.CharSequence);
  public j$.time.LocalDateTime plusDays(long);
  public j$.time.LocalDateTime plusWeeks(long);
}
-keep class j$.time.LocalTime {
  j$.time.LocalTime MAX;
}
-keep class j$.time.OffsetDateTime {
  public j$.time.Instant toInstant();
}
-keep class j$.time.OffsetTime {
  public j$.time.LocalTime toLocalTime();
}
-keep class j$.time.TimeConversions {
  public static java.time.Duration convert(j$.time.Duration);
  public static java.time.Instant convert(j$.time.Instant);
  public static j$.time.Duration convert(java.time.Duration);
  public static j$.time.Instant convert(java.time.Instant);
}
-keep class j$.time.ZoneId {
  public static j$.time.ZoneId of(java.lang.String);
  public static j$.time.ZoneId systemDefault();
  public java.lang.String toString();
}
-keep class j$.time.ZonedDateTime {
  public int getDayOfMonth();
  public j$.time.DayOfWeek getDayOfWeek();
  public int getHour();
  public int getMinute();
  public int getMonthValue();
  public int getNano();
  public int getSecond();
  public int getYear();
  public boolean isBefore(j$.time.chrono.ChronoZonedDateTime);
  public static j$.time.ZonedDateTime now(j$.time.ZoneId);
  public static j$.time.ZonedDateTime of(int,int,int,int,int,int,int,j$.time.ZoneId);
  public static j$.time.ZonedDateTime of(j$.time.LocalDateTime,j$.time.ZoneId);
  public j$.time.ZonedDateTime plusDays(long);
  public j$.time.Instant toInstant();
}
-keep interface j$.time.chrono.ChronoLocalDate {
  public j$.time.chrono.ChronoLocalDateTime atTime(j$.time.LocalTime);
}
-keep interface j$.time.chrono.ChronoLocalDateTime {
  public j$.time.chrono.ChronoZonedDateTime atZone(j$.time.ZoneId);
}
-keep interface j$.time.chrono.ChronoZonedDateTime {
  public j$.time.Instant toInstant();
}
-keep class j$.time.format.DateTimeFormatter {
  public java.lang.String format(j$.time.temporal.TemporalAccessor);
  j$.time.format.DateTimeFormatter ISO_LOCAL_DATE_TIME;
}
-keep enum j$.time.temporal.ChronoUnit {
  public long between(j$.time.temporal.Temporal,j$.time.temporal.Temporal);
  public j$.time.Duration getDuration();
  j$.time.temporal.ChronoUnit MILLIS;
  j$.time.temporal.ChronoUnit SECONDS;
}
-keep interface j$.time.temporal.Temporal {
}
-keep interface j$.time.temporal.TemporalAccessor {
}
-keep interface j$.time.temporal.TemporalAmount {
}
-keep interface j$.time.temporal.TemporalUnit {
}
-keep interface j$.util.Collection {
  public void forEach(java.util.function.Consumer);
  public j$.util.stream.Stream parallelStream();
  public boolean removeIf(java.util.function.Predicate);
  public j$.util.Spliterator spliterator();
  public j$.util.stream.Stream stream();
  public java.lang.Object[] toArray(java.util.function.IntFunction);
}
-keep class j$.util.Collection$-CC {
  public static j$.util.stream.Stream $default$parallelStream(java.util.Collection);
  public static boolean $default$removeIf(java.util.Collection,java.util.function.Predicate);
  public static j$.util.Spliterator $default$spliterator(java.util.Collection);
  public static j$.util.stream.Stream $default$stream(java.util.Collection);
  public static java.lang.Object[] $default$toArray(java.util.Collection,java.util.function.IntFunction);
}
-keep class j$.util.Collection$-EL {
  public static boolean removeIf(java.util.Collection,java.util.function.Predicate);
  public static j$.util.stream.Stream stream(java.util.Collection);
}
-keep interface j$.util.Comparator {
  public java.util.Comparator reversed();
  public java.util.Comparator thenComparing(java.util.Comparator);
  public java.util.Comparator thenComparing(java.util.function.Function);
  public java.util.Comparator thenComparing(java.util.function.Function,java.util.Comparator);
  public java.util.Comparator thenComparingDouble(java.util.function.ToDoubleFunction);
  public java.util.Comparator thenComparingInt(java.util.function.ToIntFunction);
  public java.util.Comparator thenComparingLong(java.util.function.ToLongFunction);
}
-keep class j$.util.Comparator$-CC {
  public static java.util.Comparator $default$thenComparing(java.util.Comparator,java.util.Comparator);
  public static java.util.Comparator $default$thenComparing(java.util.Comparator,java.util.function.Function);
  public static java.util.Comparator $default$thenComparing(java.util.Comparator,java.util.function.Function,java.util.Comparator);
  public static java.util.Comparator $default$thenComparingDouble(java.util.Comparator,java.util.function.ToDoubleFunction);
  public static java.util.Comparator $default$thenComparingInt(java.util.Comparator,java.util.function.ToIntFunction);
  public static java.util.Comparator $default$thenComparingLong(java.util.Comparator,java.util.function.ToLongFunction);
  public static java.util.Comparator comparing(java.util.function.Function);
}
-keep class j$.util.Comparator$-EL {
  public static java.util.Comparator reversed(java.util.Comparator);
}
-keep class j$.util.DateRetargetClass {
  public static j$.time.Instant toInstant(java.util.Date);
}
-keep class j$.util.DesugarArrays {
  public static j$.util.stream.Stream stream(java.lang.Object[]);
}
-keep class j$.util.DesugarCalendar {
  public static j$.time.Instant toInstant(java.util.Calendar);
}
-keep class j$.util.DesugarCollections {
  public static java.util.List synchronizedList(java.util.List);
  public static java.util.Map synchronizedMap(java.util.Map);
  public static java.util.Set synchronizedSet(java.util.Set);
  public static java.util.Collection unmodifiableCollection(java.util.Collection);
  public static java.util.List unmodifiableList(java.util.List);
  public static java.util.Map unmodifiableMap(java.util.Map);
  public static java.util.Set unmodifiableSet(java.util.Set);
  public static java.util.SortedMap unmodifiableSortedMap(java.util.SortedMap);
  public static java.util.SortedSet unmodifiableSortedSet(java.util.SortedSet);
}
-keep class j$.util.DesugarTimeZone {
  public static java.util.TimeZone getTimeZone(j$.time.ZoneId);
  public static java.util.TimeZone getTimeZone(java.lang.String);
}
-keep interface j$.util.List {
  public void replaceAll(java.util.function.UnaryOperator);
  public void sort(java.util.Comparator);
  public j$.util.Spliterator spliterator();
}
-keep class j$.util.List$-CC {
  public static void $default$replaceAll(java.util.List,java.util.function.UnaryOperator);
  public static void $default$sort(java.util.List,java.util.Comparator);
}
-keep class j$.util.List$-EL {
  public static void sort(java.util.List,java.util.Comparator);
}
-keep interface j$.util.Map {
  public java.lang.Object compute(java.lang.Object,java.util.function.BiFunction);
  public java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function);
  public java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction);
  public void forEach(java.util.function.BiConsumer);
  public java.lang.Object getOrDefault(java.lang.Object,java.lang.Object);
  public java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction);
  public java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object);
  public boolean remove(java.lang.Object,java.lang.Object);
  public java.lang.Object replace(java.lang.Object,java.lang.Object);
  public boolean replace(java.lang.Object,java.lang.Object,java.lang.Object);
  public void replaceAll(java.util.function.BiFunction);
}
-keep class j$.util.Map$-CC {
  public static java.lang.Object $default$compute(java.util.Map,java.lang.Object,java.util.function.BiFunction);
  public static java.lang.Object $default$computeIfAbsent(java.util.Map,java.lang.Object,java.util.function.Function);
  public static java.lang.Object $default$computeIfPresent(java.util.Map,java.lang.Object,java.util.function.BiFunction);
  public static void $default$forEach(java.util.Map,java.util.function.BiConsumer);
  public static java.lang.Object $default$getOrDefault(java.util.Map,java.lang.Object,java.lang.Object);
  public static java.lang.Object $default$merge(java.util.Map,java.lang.Object,java.lang.Object,java.util.function.BiFunction);
  public static java.lang.Object $default$putIfAbsent(java.util.Map,java.lang.Object,java.lang.Object);
  public static boolean $default$remove(java.util.Map,java.lang.Object,java.lang.Object);
  public static java.lang.Object $default$replace(java.util.Map,java.lang.Object,java.lang.Object);
  public static boolean $default$replace(java.util.Map,java.lang.Object,java.lang.Object,java.lang.Object);
  public static void $default$replaceAll(java.util.Map,java.util.function.BiFunction);
}
-keep class j$.util.Map$-EL {
  public static java.lang.Object compute(java.util.Map,java.lang.Object,java.util.function.BiFunction);
  public static java.lang.Object computeIfAbsent(java.util.Map,java.lang.Object,java.util.function.Function);
  public static java.lang.Object getOrDefault(java.util.Map,java.lang.Object,java.lang.Object);
  public static boolean remove(java.util.Map,java.lang.Object,java.lang.Object);
}
-keep class j$.util.Objects {
  public static boolean equals(java.lang.Object,java.lang.Object);
  public static int hash(java.lang.Object[]);
  public static int hashCode(java.lang.Object);
  public static boolean isNull(java.lang.Object);
  public static boolean nonNull(java.lang.Object);
  public static java.lang.Object requireNonNull(java.lang.Object);
  public static java.lang.Object requireNonNull(java.lang.Object,java.lang.String);
  public static java.lang.String toString(java.lang.Object);
  public static java.lang.String toString(java.lang.Object,java.lang.String);
}
-keep class j$.util.Optional {
  public static j$.util.Optional empty();
  public boolean equals(java.lang.Object);
  public java.lang.Object get();
  public boolean isPresent();
  public static j$.util.Optional of(java.lang.Object);
  public static j$.util.Optional ofNullable(java.lang.Object);
  public java.lang.Object orElse(java.lang.Object);
  public java.lang.Object orElseThrow(java.util.function.Supplier);
}
-keep interface j$.util.PrimitiveIterator$OfDouble {
}
-keep interface j$.util.PrimitiveIterator$OfInt {
}
-keep interface j$.util.PrimitiveIterator$OfLong {
}
-keep interface j$.util.Set {
}
-keep interface j$.util.SortedSet {
}
-keep interface j$.util.Spliterator {
  public int characteristics();
  public long estimateSize();
  public void forEachRemaining(java.util.function.Consumer);
  public java.util.Comparator getComparator();
  public long getExactSizeIfKnown();
  public boolean hasCharacteristics(int);
  public boolean tryAdvance(java.util.function.Consumer);
  public j$.util.Spliterator trySplit();
}
-keep interface j$.util.Spliterator$OfInt {
}
-keep class j$.util.Spliterator$Wrapper {
  public static java.util.Spliterator convert(j$.util.Spliterator);
}
-keep class j$.util.Spliterators {
  public static j$.util.Spliterator spliterator(java.util.Collection,int);
  public static j$.util.Spliterator$OfInt spliterator(int[],int,int,int);
  public static j$.util.Spliterator spliteratorUnknownSize(java.util.Iterator,int);
}
-keep class j$.util.StringJoiner {
  public <init>(java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence);
  public j$.util.StringJoiner add(java.lang.CharSequence);
}
-keep class j$.util.TimeZoneRetargetClass {
  public static j$.time.ZoneId toZoneId(java.util.TimeZone);
}
-keep class j$.util.concurrent.ConcurrentHashMap {
  public <init>();
  public <init>(int);
  public <init>(int,float,int);
  public <init>(java.util.Map);
  public void clear();
  public boolean containsKey(java.lang.Object);
  public java.util.Set entrySet();
  public void forEachValue(long,java.util.function.Consumer);
  public java.lang.Object get(java.lang.Object);
  public boolean isEmpty();
  public static j$.util.concurrent.ConcurrentHashMap$KeySetView newKeySet(int);
  public java.lang.Object put(java.lang.Object,java.lang.Object);
  public java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object);
  public java.lang.Object remove(java.lang.Object);
  public boolean remove(java.lang.Object,java.lang.Object);
  public boolean replace(java.lang.Object,java.lang.Object,java.lang.Object);
  public int size();
  public java.lang.String toString();
  public java.util.Collection values();
}
-keep class j$.util.concurrent.ConcurrentHashMap$KeySetView {
}
-keep interface j$.util.concurrent.ConcurrentMap {
  public java.lang.Object compute(java.lang.Object,java.util.function.BiFunction);
  public java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function);
  public java.lang.Object computeIfPresent(java.lang.Object,java.util.function.BiFunction);
  public void forEach(java.util.function.BiConsumer);
  public java.lang.Object getOrDefault(java.lang.Object,java.lang.Object);
  public java.lang.Object merge(java.lang.Object,java.lang.Object,java.util.function.BiFunction);
  public void replaceAll(java.util.function.BiFunction);
}
-keep class j$.util.concurrent.ConcurrentMap$-CC {
  public static java.lang.Object $default$compute(java.util.concurrent.ConcurrentMap,java.lang.Object,java.util.function.BiFunction);
  public static java.lang.Object $default$computeIfAbsent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.util.function.Function);
  public static java.lang.Object $default$computeIfPresent(java.util.concurrent.ConcurrentMap,java.lang.Object,java.util.function.BiFunction);
  public static void $default$forEach(java.util.concurrent.ConcurrentMap,java.util.function.BiConsumer);
  public static java.lang.Object $default$getOrDefault(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object);
  public static java.lang.Object $default$merge(java.util.concurrent.ConcurrentMap,java.lang.Object,java.lang.Object,java.util.function.BiFunction);
  public static void $default$replaceAll(java.util.concurrent.ConcurrentMap,java.util.function.BiFunction);
}
-keep class j$.util.concurrent.ThreadLocalRandom {
  public static j$.util.concurrent.ThreadLocalRandom current();
  public double nextDouble(double);
  public int nextInt();
  public int nextInt(int,int);
  public long nextLong(long);
  public long nextLong(long,long);
}
-keep class j$.util.function.BiConsumer$-CC {
  public static java.util.function.BiConsumer $default$andThen(java.util.function.BiConsumer,java.util.function.BiConsumer);
}
-keep class j$.util.function.BiFunction$-CC {
  public static java.util.function.BiFunction $default$andThen(java.util.function.BiFunction,java.util.function.Function);
}
-keep class j$.util.function.Consumer$-CC {
  public static java.util.function.Consumer $default$andThen(java.util.function.Consumer,java.util.function.Consumer);
}
-keep class j$.util.function.Function$-CC {
  public static java.util.function.Function $default$andThen(java.util.function.Function,java.util.function.Function);
  public static java.util.function.Function $default$compose(java.util.function.Function,java.util.function.Function);
}
-keep class j$.util.function.IntConsumer$-CC {
  public static java.util.function.IntConsumer $default$andThen(java.util.function.IntConsumer,java.util.function.IntConsumer);
}
-keep class j$.util.function.IntPredicate$-CC {
  public static java.util.function.IntPredicate $default$and(java.util.function.IntPredicate,java.util.function.IntPredicate);
  public static java.util.function.IntPredicate $default$negate(java.util.function.IntPredicate);
  public static java.util.function.IntPredicate $default$or(java.util.function.IntPredicate,java.util.function.IntPredicate);
}
-keep class j$.util.function.IntUnaryOperator$-CC {
  public static java.util.function.IntUnaryOperator $default$andThen(java.util.function.IntUnaryOperator,java.util.function.IntUnaryOperator);
  public static java.util.function.IntUnaryOperator $default$compose(java.util.function.IntUnaryOperator,java.util.function.IntUnaryOperator);
}
-keep class j$.util.function.Predicate$-CC {
  public static java.util.function.Predicate $default$and(java.util.function.Predicate,java.util.function.Predicate);
  public static java.util.function.Predicate $default$negate(java.util.function.Predicate);
  public static java.util.function.Predicate $default$or(java.util.function.Predicate,java.util.function.Predicate);
}
-keep interface j$.util.stream.BaseStream {
  public void close();
  public boolean isParallel();
  public java.util.Iterator iterator();
  public j$.util.stream.BaseStream onClose(java.lang.Runnable);
  public j$.util.stream.BaseStream parallel();
  public j$.util.stream.BaseStream sequential();
  public j$.util.Spliterator spliterator();
  public j$.util.stream.BaseStream unordered();
}
-keep interface j$.util.stream.Collector {
}
-keep class j$.util.stream.Collector$-CC {
  public static j$.util.stream.Collector of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.function.Function,j$.util.stream.Collector$Characteristics[]);
}
-keep enum j$.util.stream.Collector$Characteristics {
}
-keep class j$.util.stream.Collectors {
  public static j$.util.stream.Collector toList();
  public static j$.util.stream.Collector toSet();
}
-keep interface j$.util.stream.DoubleStream {
  public j$.util.PrimitiveIterator$OfDouble iterator();
  public double[] toArray();
}
-keep interface j$.util.stream.IntStream {
  public j$.util.PrimitiveIterator$OfInt iterator();
  public j$.util.stream.IntStream map(java.util.function.IntUnaryOperator);
  public boolean noneMatch(java.util.function.IntPredicate);
  public int[] toArray();
}
-keep class j$.util.stream.IntStream$VivifiedWrapper {
  public static j$.util.stream.IntStream convert(java.util.stream.IntStream);
}
-keep interface j$.util.stream.LongStream {
  public j$.util.PrimitiveIterator$OfLong iterator();
  public long[] toArray();
}
-keep interface j$.util.stream.Stream {
  public boolean allMatch(java.util.function.Predicate);
  public boolean anyMatch(java.util.function.Predicate);
  public java.lang.Object collect(j$.util.stream.Collector);
  public java.lang.Object collect(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BiConsumer);
  public long count();
  public j$.util.stream.Stream distinct();
  public j$.util.stream.Stream filter(java.util.function.Predicate);
  public j$.util.Optional findAny();
  public j$.util.Optional findFirst();
  public j$.util.stream.Stream flatMap(java.util.function.Function);
  public j$.util.stream.DoubleStream flatMapToDouble(java.util.function.Function);
  public j$.util.stream.IntStream flatMapToInt(java.util.function.Function);
  public j$.util.stream.LongStream flatMapToLong(java.util.function.Function);
  public void forEach(java.util.function.Consumer);
  public void forEachOrdered(java.util.function.Consumer);
  public j$.util.stream.Stream limit(long);
  public j$.util.stream.Stream map(java.util.function.Function);
  public j$.util.stream.DoubleStream mapToDouble(java.util.function.ToDoubleFunction);
  public j$.util.stream.IntStream mapToInt(java.util.function.ToIntFunction);
  public j$.util.stream.LongStream mapToLong(java.util.function.ToLongFunction);
  public j$.util.Optional max(java.util.Comparator);
  public j$.util.Optional min(java.util.Comparator);
  public boolean noneMatch(java.util.function.Predicate);
  public j$.util.stream.Stream peek(java.util.function.Consumer);
  public java.lang.Object reduce(java.lang.Object,java.util.function.BiFunction,java.util.function.BinaryOperator);
  public java.lang.Object reduce(java.lang.Object,java.util.function.BinaryOperator);
  public j$.util.Optional reduce(java.util.function.BinaryOperator);
  public j$.util.stream.Stream skip(long);
  public j$.util.stream.Stream sorted();
  public j$.util.stream.Stream sorted(java.util.Comparator);
  public java.lang.Object[] toArray();
  public java.lang.Object[] toArray(java.util.function.IntFunction);
}
-keep class j$.util.stream.Stream$-CC {
  public static j$.util.stream.Stream empty();
  public static j$.util.stream.Stream of(java.lang.Object);
  public static j$.util.stream.Stream of(java.lang.Object[]);
}
-keep class j$.util.stream.Stream$VivifiedWrapper {
  public static j$.util.stream.Stream convert(java.util.stream.Stream);
}
-keep class j$.util.stream.Stream$Wrapper {
  public static java.util.stream.Stream convert(j$.util.stream.Stream);
}
-keep class j$.util.stream.StreamSupport {
  public static j$.util.stream.Stream stream(j$.util.Spliterator,boolean);
  public static j$.util.stream.Stream stream(java.util.function.Supplier,int,boolean);
}
-keep class java.io.UncheckedIOException {
  public <init>(java.io.IOException);
  public <init>(java.lang.String,java.io.IOException);
}
-keep interface java.util.function.BiConsumer {
}
-keep interface java.util.function.BiFunction {
  public java.lang.Object apply(java.lang.Object,java.lang.Object);
}
-keep interface java.util.function.BiPredicate {
}
-keep interface java.util.function.BinaryOperator {
}
-keep interface java.util.function.Consumer {
  public void accept(java.lang.Object);
}
-keep interface java.util.function.Function {
  public java.lang.Object apply(java.lang.Object);
}
-keep interface java.util.function.IntConsumer {
}
-keep interface java.util.function.IntFunction {
}
-keep interface java.util.function.IntPredicate {
  public boolean test(int);
}
-keep interface java.util.function.IntSupplier {
}
-keep interface java.util.function.IntUnaryOperator {
  public int applyAsInt(int);
}
-keep interface java.util.function.LongSupplier {
}
-keep interface java.util.function.Predicate {
  public boolean test(java.lang.Object);
}
-keep interface java.util.function.Supplier {
  public java.lang.Object get();
}
-keep interface java.util.function.ToDoubleFunction {
}
-keep interface java.util.function.ToIntFunction {
}
-keep interface java.util.function.ToLongFunction {
}
-keep interface java.util.function.UnaryOperator {
}
